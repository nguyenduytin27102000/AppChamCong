@{
    ViewData["Title"] = "Overview Time Sheet";
}

<style>
    #quick-filter {
        background-image: url('@Url.Content("~/storage/images/search-icon.png")');
        background-repeat: no-repeat;
        background-size: 1.5rem 1.5rem;
        background-position: 0.6em center;
    }
    .pagination{
        position: relative;
    }
    #time-modal{
        position: absolute;
        z-index: 999;
        width: 20rem;
    }
    #time-modal-button{
        cursor: pointer;
    }
    .text-bb {
        color: #15304c !important;
    }
    .page-link {
        color: #15304c !important;
    }
    .bg-weekend {
        background-color: #6c757d3b !important;
    }
    .bg-halfoff {
        background-color: #e28e1a91 !important;
    }
    .bg-fulloff {
        background-color: #28a7455c !important;
    }
    .bg-specifyoff {
        background-color: #e658583b !important;
    }
</style>

<div class="banner row">
    <div class="col-3 pl-5 pt-4">
        @*<div class="rounded shadow-sm p-2 d-inline bg-light">
            <a href="/TimeSheet/Overview/@ViewData["pre-timesheet"]" class="btn border p-2"><i class="fas fa-angle-left"></i></a>
            <span class="p-2">@ViewData["label-time"]</span>
            <a href="/TimeSheet/Overview/@ViewData["next-timesheet"]" class="btn border p-2"><i class="fas fa-angle-right"></i></a>
        </div>*@
        <nav aria-label="timesheet-pagination">
            <ul class="pagination">
                <li class="page-item">
                    <a class="page-link" href="/TimeSheet/Overview/@ViewData["pre-timesheet"]"><i class="fas fa-angle-left"></i></a>
                </li>
                <li class="page-item"><span class="page-link font-weight-bold px-3" id="time-modal-button">
                    <i class="fas fa-calendar-alt"></i> @ViewData["label-time"]</span>
                </li>
                <li class="page-item">
                    <a class="page-link" href="/TimeSheet/Overview/@ViewData["next-timesheet"]"><i class="fas fa-angle-right"></i></a>
                </li>
            </ul>
            <div id="time-modal"></div>
        </nav>
    </div>

    <div class="col-6 text-center">
        <h3 class="text-uppercase font-weight-bold">timesheet overview</h3>
    </div>

    <div class="col-3 pl-4 pt-3">
        <a href="/TimeSheet/Export/@ViewData["cur-timesheet"]" data-ajax="true" data-ajax-method="get"
           class="btn btn-success btn-sm text-uppercase">Export timesheet overview</a>
    </div>
</div>

<div id="time-sheet-overview" class="my-3">
    <div class="time-sheet-container row mx-0 justify-content-between">
        <div class="col-2 p-0 px-2 pb-4">
            <div style="height:3rem;">
                <input type="text" name="key-work" id="quick-filter" class="form-control mb-0 pl-5" placeholder="Search"  />
            </div>
            <div id="employees-container">
                
            </div>
        </div>

        <div class="col-10" id="time-info-container" style="overflow-x: scroll; font-size:0.9rem;">
            <div class="d-flex" id="day-of-week"></div>
        </div>
        
    </div>
</div>

@* template timesheet title *@
<template id="time-sheet-date-title">
    <div style="min-width: 5rem; max-height:3rem;" class="card mr-1">
        <p class="time-sheet-date font-weight-bold text-bb text-center mb-0"></p>
        <p class="text-center date-name mb-0 text-info font-weight-bolder text-uppercase"></p>
    </div>
</template>


@* template employee *@
<template id="employee-item">
    <div class="row border border-secondary mx-0 px-1 mt-1 card bg-white" style="max-height:3rem; min-height:3rem; font-size:0.8rem;">
        <div class="col-9 px-1">
            <p class="font-weight-bold employee-name mb-0"></p>
            <p class="text-muted employee-code mb-0"></p>
        </div>
        <div class="col-3 px-1" style="border-left: 1px solid #6c757d;">
            <p class="mb-1">DAY: <strong class="days"></strong></p>
            <p class="mb-1">OFF: <strong class="hours"></strong></p>
        </div>
    </div>
</template>

@* template work *@
<template id="timeinfo-item">
    <div class="border border-info text-center mx-0 mr-1 px-2 card" style="max-height:3rem; min-height:3rem; max-width:5rem; min-width:5rem;">
        @* Co the thay doi theo tin trang check in - out *@
        <p class="check-in mb-0"></p>
        <p class="check-out mb-0"></p>
    </div>
</template>

<template id="modal-time-container">
    
    <div class="rounded shadow bg-light">
        <form asp-action="ChangeTimeSheetOverview" asp-controller="TimeSheet" method="get">
            <div class="row mx-0 p-3">
                <div class="col-6 px-2">
                    <select class="form-control" name="month">
                        <option value="1">January</option>
                        <option value="2">February</option>
                        <option value="3">March</option>
                        <option value="4">April</option>
                        <option value="5">May</option>
                        <option value="6">June</option>
                        <option value="7">July</option>
                        <option value="8">August</option>
                        <option value="9">August</option>
                        <option value="10">October</option>
                        <option value="11">November</option>
                        <option value="12">December</option>
                    </select>
                </div>

                <div class="col-6 px-2">
                    <select class="form-control" name="year"></select>
                </div>
            </div>
            <div class="row p-3 mx-0">
                <div class="col-4"></div>
                <div class="col-8">
                    <button class="btn btn-secondary btn-sm float-right" id="closebtn">CLOSE</button>
                    <button type="submit" class="btn btn-sm btn-success float-right mr-2" id="submitbtn">DONE</button>
                </div>
            </div>
        </form>
    </div>
    
</template>

@section Scripts{
    <script>
        (() => {
            const dayOfMonthArray = @Html.Raw(ViewData["days"]);
            const timeInfoArray = @Html.Raw(ViewData["time-info"]);
            const dayTitleContainer = document.querySelector('#day-of-week');
            const personContainer = document.querySelector('#employees-container');
            const timeContainer = document.querySelector('#time-info-container');
            const quickFilter = document.querySelector('#quick-filter');
            const currentMonth = @Html.Raw(ViewData["month"]);
            const currentYear = @Html.Raw(ViewData["year"]);
            const shifts = @Html.Raw(ViewData["shifts"]);

            const morningStart = new Date(shifts.Morning.Start);
            const morningEnd = new Date(shifts.Morning.End);
            const afternoonStart = new Date(shifts.Afternoon.Start);
            const afternoonEnd = new Date(shifts.Afternoon.End);
            const fulldayStart = new Date(shifts.Fullday.Start);
            const fulldayEnd = new Date(shifts.Fullday.End);

            document.querySelector('#time-modal-button').onclick = showTimeModalHandle;



            quickFilter.onkeyup = quickFilterHandle;


            //renderDayOfWeekTitle(dayOfMonthArray, timeContainer);
            renderPersonAndTime(timeInfoArray, personContainer, timeContainer, dayOfMonthArray);

            //event
            function showTimeModalHandle(e) {
                const modal = document.querySelector('#time-modal');
                if (modal.innerHTML == '') {
                    const tmp = document.querySelector('#modal-time-container');
                    const cloneTmp = tmp.content.cloneNode(true);
                    const yearItem = cloneTmp.querySelector('select[name="year"]');
                    renderYear(2018, 2030, yearItem);
                    cloneTmp.querySelector('#closebtn').onclick = closeModalHandle;
                    modal.appendChild(cloneTmp);
                }
                else {
                    modal.innerHTML = '';
                }
                
            }

            function closeModalHandle(e) {
                e.preventDefault();
                document.querySelector('#time-modal').innerHTML = '';
            }
            function quickFilterHandle(e) {
                const keyWord = e.target.value;
                if (keyWord.trim()) {
                    const keyLower = keyWord.trim().toLowerCase();
                    const timeInfoFilter = timeInfoArray.filter(e => e.FullName.toLowerCase().includes(keyLower));
                    renderPersonAndTime(timeInfoFilter, personContainer, timeContainer, dayOfMonthArray);
                }
                else {
                    renderPersonAndTime(timeInfoArray, personContainer, timeContainer, dayOfMonthArray);
                }
            }

            // function
            function renderYear(from, to, container) {
                for (let i = from; i <= to; i++) {
                    const option = document.createElement('option');
                    option.value = i;
                    option.innerHTML = i;

                    container.appendChild(option);
                }
            }

            function renderDayOfWeekTitle(data, container) {
                const DOW = data;
                const div = document.createElement('div');
                div.id = 'day-of-week';
                div.classList.add('d-flex');
                timeContainer.appendChild(div);
                if (Array.isArray(DOW)) {
                    DOW.forEach(e => {
                        const tmp = document.querySelector('#time-sheet-date-title').content.cloneNode(true);
                        tmp.querySelector('.time-sheet-date').innerHTML = `${(e.Day + '').padStart(2, '0')}`;
                        if (e.DayName == 'Sat' || e.DayName == 'Sun') {
                            tmp.querySelector('.card').classList.add('bg-weekend');
                        }
                        tmp.querySelector('.date-name').innerHTML = `${e.DayName}`;
                        div.appendChild(tmp);
                    });
                }
                container.appendChild(div);
            }

            function renderPersonAndTime(data, personContainer, timeContainer, dayOfMonth) {
                timeContainer.innerHTML = '';
                personContainer.innerHTML = '';


                renderDayOfWeekTitle(dayOfMonthArray, timeContainer);


                renderPersonInfo(data, personContainer);
                renderTimeInfo(data, timeContainer, dayOfMonth);

            }

            function renderPersonInfo(data, personContainer) {
                personContainer.innerHTML = '';
                const tmp = document.querySelector('#employee-item');
                if (tmp) {
                    if (Array.isArray(data)) {
                        data.forEach(e => {
                            const cloneTmp = tmp.content.cloneNode(true);
                            cloneTmp.querySelector('.employee-name').innerHTML = e.FullName;
                            cloneTmp.querySelector('.employee-code').innerHTML = e.PersonnelId;
                            cloneTmp.querySelector('.days').innerHTML = e.Days;
                            cloneTmp.querySelector('.hours').innerHTML = e.Off;
                            personContainer.appendChild(cloneTmp);
                        });
                    }
                }
            }

            function renderTimeInfo(data, timeContainer, dayOfMonthArray) {
                const tmp = document.querySelector('#timeinfo-item');
                if (tmp) {
                    if (Array.isArray(data)) {
                        data.forEach(e => {
                            const timeInfoRow = document.createElement("div");
                            timeInfoRow.classList.add("d-flex", "mt-1");
                            for (let i = 1; i <= dayOfMonthArray.length; i++) {
                                const element = dayOfMonthArray[i - 1];
                                let dateGlobal = new Date(currentYear, currentMonth - 1, i, 0, 0, 0, 0);

                                // get check in hour in per day
                                const checkinTime = e.Checkin.filter(f => {
                                    const date = new Date(f.Date);
                                    return date.getDate() == element.Day && element.Month == date.getMonth() + 1
                                        && element.Year == date.getFullYear();
                                });

                                // get dayoff
                                let dayOff;
                                e.DayOff.forEach(f => {
                                    const dateTime = f.DateTime.find(g => {
                                        const date = new Date(g.Date);
                                        return date.getMonth() + 1 == currentMonth && date.getDate() == i && date.getFullYear() == currentYear;
                                    });
                                    if (dateTime) dayOff = dateTime;
                                });

                                // set cell color for date off
                                const tmpClone = tmp.content.cloneNode(true);

                                if (dayOff) {
                                    const toHour = convertStringToHour(dayOff.To);
                                    const fromHour = convertStringToHour(dayOff.From);
                                    
                                    console.log(morningStart);
                                    
                                    //half day off
                                    if (compareHour(fromHour, morningStart)) {
                                        if (compareHour(toHour, morningEnd)) {
                                            // half off
                                            tmpClone.querySelector('.card').classList.add('bg-halfoff');
                                        }
                                        else if (compareHour(toHour, fulldayEnd)) {
                                            // fullday off
                                            tmpClone.querySelector('.card').classList.add('bg-fulloff');
                                        }
                                        else {
                                            // specify off
                                            tmpClone.querySelector('.card').classList.add('bg-specifyoff');
                                        }
                                    }
                                    else if (compareHour(fromHour, afternoonStart)) {
                                        if (compareHour(toHour, afternoonEnd)) {
                                            // half off
                                            tmpClone.querySelector('.card').classList.add('bg-halfoff');
                                        }
                                        else {
                                            // specify off
                                            tmpClone.querySelector('.card').classList.add('bg-specifyoff');
                                        }
                                    }
                                    else {
                                        // specify off
                                        tmpClone.querySelector('.card').classList.add('bg-specifyoff');
                                    }
                                }

                                if (dateGlobal.getDay() == 0 || dateGlobal.getDay() == 6) {
                                    tmpClone.querySelector('.card').classList.add('bg-weekend');
                                }
                                if (checkinTime.length != 0) {
                                    sortedResult = checkinTime.sort(function (a, b) {
                                        const hm1 = a.Hour.split(':');
                                        const hm2 = b.Hour.split(':');

                                        const hour1 = parseInt(hm1[0]);
                                        const minute1 = parseInt(hm1[1]);

                                        const hour2 = parseInt(hm2[0]);
                                        const minute2 = parseInt(hm2[1]);

                                        if (hour1 == hour2) {
                                            return minute1 - minute2;
                                        }
                                        return hour1 - hour2;
                                    });
                                    tmpClone.querySelector('.check-in').innerHTML = sortedResult[0].Hour;
                                    tmpClone.querySelector('.check-out').innerHTML = sortedResult.length == 1 ? '' : sortedResult[1].Hour;
                                    tmpClone.querySelector('.card').classList.add('bg-white');
                                }
                                timeInfoRow.appendChild(tmpClone);
                            }
                            timeContainer.appendChild(timeInfoRow);
                        });
                    }
                }
            }

            

            function convertHourToInt(hour) {
                const tmp = hour.split(':');
                if (tmp.length == 2) {
                    let number = tmp[0] + tmp[1];
                    return parseInt(number);
                }
            }
            function convertStringToHour(str) {
                const tmp = str.split(':');
                if (tmp.length == 2) {
                    return { Hour: tmp[0], Minute: tmp[1] }
                }
            }
            function convertIntToHour(number) {
                let hour = (number / 100).toFixed(0);
                let minute = (number % 100) + '';
                return `${hour}:${minute.padStart(2, '0')}`;
            }

            function compareHour(obj, date) {
                return obj.Hour == date.getHours() && obj.Minute == date.getMinutes();
            }
        })();
    </script>
}

